{"version":3,"sources":["movie.js","MoviesList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","movie","react_default","a","createElement","Link","to","concat","id","Overdrive_min_default","Poster","src","poster_path","alt","title","styled","img","_templateObject","MoviesList","state","movies","fetch","res","json","this","setState","results","console","log","_context","t0","MovieGrid","map","src_movie","key","Component","div","MoviesList_templateObject","MovieDetail","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","MovieDetail_templateObject","_templateObject2","App","BrowserRouter","className","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ocAOA,IAUeA,EARD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKN,EAAMO,KACjBN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWK,GAAIP,EAAMO,IACnBN,EAAAC,EAAAC,cAACM,EAAD,CAAQC,IAAG,GAAAJ,OALG,kCAKHA,OAAmBN,EAAMW,aAAeC,IAAKZ,EAAMa,WAavDJ,EAASK,IAAOC,IAAVC,iMCKJC,6MAzBXC,MAAQ,CACJC,OAAQ,gOAKcC,MAAM,4LAAlBC,kBACeA,EAAIC,cAAnBH,SACNI,KAAKC,SAAS,CACVL,OAAQA,EAAOM,4DAGnBC,QAAQC,IAARC,EAAAC,iJAKJ,OACI5B,EAAAC,EAAAC,cAAC2B,EAAD,KACKP,KAAKL,MAAMC,OAAOY,IAAI,SAAA/B,GAAK,OAAIC,EAAAC,EAAAC,cAAC6B,EAAD,CAAOhC,MAAOA,EAAOiC,IAAKjC,EAAMO,OADpE,YAnBa2B,aA4BnBJ,EAAYhB,IAAOqB,IAAVC,2ZC1Bf,IAyCeC,6MArCXnB,MAAQ,CACJlB,MAAO,gOAKeoB,MAAK,sCAAAd,OAAuCiB,KAAKe,MAAMC,MAAMC,OAAOjC,GAA/D,2EAAjBc,kBACcA,EAAIC,cAAlBtB,SACNuB,KAAKC,SAAS,CACVxB,4DAGJ0B,QAAQC,IAARC,EAAAC,iJAIC,IACG7B,EAAUuB,KAAKL,MAAflB,MACR,OACIC,EAAAC,EAAAC,cAACsC,EAAD,CAAcC,SAAQ,GAAApC,OAtBZ,mCAsBYA,OAAqBN,EAAM2C,gBAC7C1C,EAAAC,EAAAC,cAACyC,EAAD,KACI3C,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWK,GAAIP,EAAMO,IACjBN,EAAAC,EAAAC,cAACM,EAAD,CAAQC,IAAG,GAAAJ,OA1Bf,kCA0BeA,OAAmBN,EAAMW,aAAeC,IAAKZ,EAAMa,SAElEZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKH,EAAMa,OACXZ,EAAAC,EAAAC,cAAA,UAAKH,EAAM6C,cACX5C,EAAAC,EAAAC,cAAA,SAAIH,EAAM8C,UACV7C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,SAAT,qBA7BE6B,aAyCpBO,EAAe3B,IAAOqB,IAAVY,IAGA,SAAAT,GAAK,OAAIA,EAAMI,WAI3BE,EAAY9B,IAAOqB,IAAVa,KC/BAC,EAdH,kBACVhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,OAGblD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWvC,IACrChB,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOE,KAAK,OAAOC,UAAWnB,QCPlBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCZNsB,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6d485436.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport Overdrive from 'react-overdrive'\n\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154'\n\nconst Movie = ({ movie }) => (\n  <Link to={`${movie.id}`}>\n    <Overdrive id={movie.id}>\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    </Overdrive>\n  </Link>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({ //eslint-disable-line\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const Poster = styled.img`\nbox-shadow: 0 0 35px black;\n`;\n","import React, { Component } from 'react';\nimport Movie from './movie';\nimport styled from 'styled-components'\n\nclass MoviesList extends Component {\n    state = {\n        movies: [],\n    }\n\n    async componentDidMount() {\n        try {\n            const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=acc856a56d4d1ba6ad307ce6cbfa0e1d&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1');\n            const movies = await res.json();\n            this.setState({\n                movies: movies.results,\n            });\n        } catch (e) {\n            console.log(e); // eslint-disable-line\n        }\n    }\n\n    render() {\n        return (\n            <MovieGrid>\n                {this.state.movies.map(movie => <Movie movie={movie} key={movie.id} />)} {/* eslint-disable-line */}\n            </MovieGrid>\n        );\n    }\n}\n\nexport default MoviesList;\n\nconst MovieGrid = styled.div`\n    display: grid;\n    padding: 1rem;\n    grid-template-columns: repeat(6, 1fr);\n    grid-row-gap: 1rem;\n\n\n`;\n\n","import React, { Component } from 'react';\nimport { Poster } from './movie'\nimport styled from 'styled-components'\nimport Overdrive from 'react-overdrive'\nimport { Link } from 'react-router-dom'\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154'\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280'\n\nclass MovieDetail extends Component {\n    state = {\n        movie: {},\n    }\n\n    async componentDidMount() {\n        try {\n            const res = await fetch(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=acc856a56d4d1ba6ad307ce6cbfa0e1d&language=en-US`);\n            const movie = await res.json();\n            this.setState({\n                movie,\n            });\n        } catch (e) {\n            console.log(e); // eslint-disable-line\n        }\n    }\n\n    render() {\n        const { movie } = this.state\n        return (\n            <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`} >\n                <MovieInfo>\n                    <Overdrive id={movie.id}>\n                        <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n                    </Overdrive>\n                    <div>\n                        <h1>{movie.title}</h1>\n                        <h3>{movie.release_date}</h3>\n                        <p>{movie.overview}</p>\n                        <Link to=\"/home\">Go Back</Link>\n\n                    </div>\n                </MovieInfo>\n            </MovieWrapper >\n        );\n    }\n}\n\nexport default MovieDetail;\n\n\nconst MovieWrapper = styled.div`\nposition: relative;\npadding-top: 50vh;\nbackground: url(${props => props.backdrop}) no-repeat;\nbackground-size: cover;\n`;\n\nconst MovieInfo = styled.div`\nbackground: white;\ntext-align: left;\npadding: 2rem 10%;\ndisplay: flex;\n> div {\n    margin-left: 20px;\n}\nimg {\n    position: relative;\n    top: -5rem;\n}\n\n`;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link\n} from 'react-router-dom'\nimport './App.css';\nimport MoviesList from './MoviesList';\nimport MovieDetail from './MovieDetail';\n\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n      </header> */}\n      <Switch>\n        <Route exact path=\"/home\" component={MoviesList} />\n        <Route path=\"/:id\" component={MovieDetail} />\n      </Switch>\n    </div>\n  </Router>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}